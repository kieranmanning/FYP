
For talks on wednesday:
	- Decide on scope
	- Ask about compiling to a lower object code;
	  Might be an easier platform for getting to JS.
	- G-machine to be implemented via slave labour.
	- Disregard the display crap. It could probably
	  be rewritten with with as little as a handful
	  of show statements.
	- Happy parser for core.
	- Front Facing dsl.
	- Not currently performing graph updates, just
	  dumping additionally onto the stack
	- Only significant difference to GHC current core
	  is that a core program here is represented as a
	  list of ScDefns whereas GHCCCore has an additional
	  bind data type external to the Expr and is represented
	  as a series of top-level bindings.

Some of this is annotated on paper. Should be saved for purposes
of adding to report.

I'm using the 'Core-like' language from the SJP implementorial
book. Further reading should start there for anyone interested.

Why this isn't 'Core' core:

The current version of core is doing my head in. It also contains
unnecessary information. I may well update this to represent actual
core but i'll probably end up parsing GHC current core into this
version as all I need is already expressed here.

The only significant difference really is in the type-signatures,
type annotations and the non-unary infix applicator (?!!).

G-Machine will be required for case alternatives and probably
for any kind of ADT representations.

g-machine that spits out push/mkapp/unwind etc. which i represent in 
JS. is this plausible? aiming towards laziness. Oh! and a graphState
representation

ask about the problem of reducing funcs when we're trying to compile
to a single num pointer on the stack
