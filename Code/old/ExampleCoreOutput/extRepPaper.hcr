%module main:Test

%data main:Test.Bintree aaeQ =
    {main:Test.Fork (main:Test.Bintree aaeQ) (main:Test.Bintree aaeQ);
     main:Test.Leaf aaeQ};

%data main:Test.Agnostic (faeO::(*->*)) aaeP =
    {main:Test.MkA (faeO aaeP)};

main:Test.identityFunction :: %forall xaeR . xaeR -> xaeR =
    \ @ xm (aparamaeS::xm) -> aparamaeS;

main:Test.letFunction :: %forall aamS . (base:GHCziNum.Num aamS) ->
                                          aamS -> aamS =
    \ @ aamV (zddNumamW::base:GHCziNum.Num aamV) (aparamaeT::aamV) ->
        base:GHCziNum.zt @ aamV zddNumamW
        (base:GHCziNum.fromInteger @ aamV zddNumamW
         (1337::integerzmgmp:GHCziIntegerziType.Integer))
        aparamaeT;

main:Test.main :: ghczmprim:GHCziTypes.IO
                    ghczmprim:GHCziTuple.Z0T =
    base:SystemziIO.print
    @ (ghczmprim:GHCziTypes.ZMZN ghczmprim:GHCziTypes.Char)
    (base:GHCziShow.zdfShowZMZN @ ghczmprim:GHCziTypes.Char
     base:GHCziShow.zdfShowChar)
    (ghczmprim:GHCziCString.unpackCStringzh
     ("ignore"::ghczmprim:GHCziPrim.Addrzh));

main:Test.nonFunction :: integerzmgmp:GHCziIntegerziType.Integer =
    (2::integerzmgmp:GHCziIntegerziType.Integer);
